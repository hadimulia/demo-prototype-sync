spring.application.name= demo-payment-v1
server.servlet.context-path=/payment
server.port= 8222
spring.profiles.active=Kafka
eureka.client.service-url.defaultZone= ${EUREKA_URI:http://localhost:8761/eureka}
eureka.client.prefer-same-zone-eureka=true


## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5432/ecommerce-payment-v1
spring.datasource.username= postgres
spring.datasource.password= 123456

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

# SPRING CLOUD STREAM
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer


# SPRING CLOUD STREAM
#spring.cloud.stream.default-binder: kafka
#spring.cloud.stream.kafka.binder.brokers: localhost:9092

#spring.cloud.stream.bindings.payment-order-input.destination: app.order
#spring.cloud.stream.bindings.payment-order-input.contentType: application/json

#spring.cloud.stream.bindings.payment-order-output.destination: order.update
#spring.cloud.stream.bindings.payment-order-output.contentType: application/json

#spring.cloud.stream.bindings.order-aggregator-output.destination: order.aggregator.update
#spring.cloud.stream.bindings.order-aggregator-output.contentType: application/json