server.port=9082
eureka.client.service-url.defaultZone= ${EUREKA_URI:http://localhost:8761/eureka}
eureka.client.prefer-same-zone-eureka=true
spring.profiles.active=Kafka

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5432/product_demo
spring.datasource.username=postgres
spring.datasource.password=123456
spring.datasource.hikari.maximum-pool-size=500
spring.datasource.hikari.minimum-idle=10

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

spring.application.name=demo-product

# SPRING CLOUD STREAM
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

#JMS Provide
spring.cloud.stream.default-binder=kafka
spring.cloud.stream.kafka.binder.brokers=localhost:9092

#spring.cloud.stream.bindings.get-info-from-order.destination=get.info.from.order
#spring.cloud.stream.bindings.get-info-from-order.content-type=application/json
#spring.cloud.stream.bindings.get-info-from-order.consumer.concurrency=20

#spring.cloud.stream.bindings.send-info-order-agregator.destination=order.aggregator.update
#spring.cloud.stream.bindings.send-info-order-agregator.content-type=application/json
#spring.cloud.stream.bindings.send-info-order-agregator.consumer.concurrency=20

#spring.cloud.stream.bindings.poduct-update.destination=product.update
#spring.cloud.stream.bindings.poduct-update.content-type=application/json
#spring.cloud.stream.bindings.poduct-update.consumer.concurrency=20

#spring.cloud.stream.bindings.send-info-order-v1.destination=order.update.v1
#spring.cloud.stream.bindings.send-info-order-v1.content-type=application/json
#spring.cloud.stream.bindings.send-info-order-v1.consumer.concurrency=20

#spring.cloud.stream.bindings.send-info-order-v2.destination=order.update.v2
#spring.cloud.stream.bindings.send-info-order-v2.content-type=application/json
#spring.cloud.stream.bindings.send-info-order-v2.consumer.concurrency=20

#spring.cloud.stream.bindings.send-info-transaction-v1.destination=update.payment.v1
#spring.cloud.stream.bindings.send-info-transaction-v1.content-type=application/json
#spring.cloud.stream.bindings.send-info-transaction-v1.consumer.concurrency=20

#spring.cloud.stream.bindings.send-info-transaction-v2.destination=update.payment.v2
#spring.cloud.stream.bindings.send-info-transaction-v2.content-type=application/json
#spring.cloud.stream.bindings.send-info-transaction-v2.consumer.concurrency=20

#spring.cloud.stream.bindings.customer-rollback-balance.destination=get.info.from.order
#spring.cloud.stream.bindings.customer-rollback-balance.content-type=application/json
#spring.cloud.stream.bindings.customer-rollback-balance.consumer.concurrency=20

#spring.cloud.stream.bindings.to-uppercase-request.destination=to-uppercase-request
#spring.cloud.stream.bindings.to-uppercase-request.content-type=application/json
#spring.cloud.stream.bindings.to-uppercase-request.consumer.concurrency=20

#spring.cloud.stream.bindings.to-uppercase-reply.destination=to-uppercase-reply
#spring.cloud.stream.bindings.to-uppercase-reply.content-type=application/json
#spring.cloud.stream.bindings.to-uppercase-reply.consumer.concurrency=20
