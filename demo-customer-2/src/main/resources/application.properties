server.port=9081
eureka.client.service-url.defaultZone= ${EUREKA_URI:http://localhost:8761/eureka}
eureka.client.prefer-same-zone-eureka=true
spring.profiles.active=Kafka

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5433/customer_demo_2
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.hikari.maximum-pool-size=500
spring.datasource.hikari.minimum-idle=10

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

spring.application.name=demo-customer-2

#JMS Provide
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer


#spring.cloud.stream.bindings.customer-v2.destination=customer.v2
#spring.cloud.stream.bindings.customer-v2.content-type=application/json
#spring.cloud.stream.bindings.customer-v2.consumer.concurrency=20

#spring.cloud.stream.bindings.customer-get-info.destination=customer.find.id.v2
#spring.cloud.stream.bindings.customer-get-info.content-type=application/json
#spring.cloud.stream.bindings.customer-get-info.consumer.concurrency=20

#spring.cloud.stream.bindings.customer-send-info.destination=order.aggregator.update
#spring.cloud.stream.bindings.customer-send-info.content-type=application/json
#spring.cloud.stream.bindings.customer-send-info.consumer.concurrency=20

#spring.cloud.stream.bindings.order-input.destination=order.update.v2
#spring.cloud.stream.bindings.order-input.content-type=application/json
#spring.cloud.stream.bindings.order-input.consumer.concurrency=20

#spring.cloud.stream.bindings.customer-update-balance.destination=customer.update.balance.v2
#spring.cloud.stream.bindings.customer-update-balance.content-type=application/json
#spring.cloud.stream.bindings.customer-update-balance.consumer.concurrency=20

#spring.cloud.stream.bindings.customer-transaction.destination=transaction.response.customer.v2
#spring.cloud.stream.bindings.customer-transaction.content-type=application/json
#spring.cloud.stream.bindings.customer-transaction.consumer.concurrency=20

#spring.cloud.stream.bindings.customer-rollback-balance.destination=customer.rollback.balance
#spring.cloud.stream.bindings.customer-rollback-balance.content-type=application/json
#spring.cloud.stream.bindings.customer-rollback-balance.consumer.concurrency=20
