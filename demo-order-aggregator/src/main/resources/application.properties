spring.application.name= order-aggregator
server.servlet.context-path=/order-aggregator
server.port= 8999
spring.profiles.active=Kafka

eureka.client.service-url.defaultZone= ${EUREKA_URI:http://localhost:8761/eureka}
eureka.client.prefer-same-zone-eureka=true


## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5432/ecommerce-order-aggregator
spring.datasource.username= postgres
spring.datasource.password= 123456
spring.datasource.hikari.maximum-pool-size=500
spring.datasource.hikari.minimum-idle=10

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.jpa.show-sql= true

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# SPRING CLOUD STREAM
spring.cloud.stream.default-binder: kafka
spring.cloud.stream.kafka.binder.brokers: localhost:9092

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

spring.cloud.stream.bindings.orderaggregator-input.destination: order.aggregator.update
spring.cloud.stream.bindings.orderaggregator-input.contentType: application/json
spring.cloud.stream.bindings.orderaggregator-input.consumer.concurrency=20

spring.cloud.stream.bindings.order-created-sync-input.destination: order.created.sync.request
spring.cloud.stream.bindings.order-created-sync-input.content-type: application/json
spring.cloud.stream.bindings.order-created-sync-input.consumer.concurrency=20

spring.cloud.stream.bindings.order-created-sync-output.destination: order.created.sync.response
spring.cloud.stream.bindings.order-created-sync-output.content-type: application/json
spring.cloud.stream.bindings.order-created-sync-output.consumer.concurrency=20

spring.cloud.stream.bindings.order-confirm-sync-input.destination: order.confirm.sync.request
spring.cloud.stream.bindings.order-confirm-sync-input.content-type: application/json
spring.cloud.stream.bindings.order-confirm-sync-input.consumer.concurrency=20

spring.cloud.stream.bindings.order-confirm-sync-output.destination: order.confirm.sync.response
spring.cloud.stream.bindings.order-confirm-sync-output.content-type: application/json
spring.cloud.stream.bindings.order-confirm-sync-output.consumer.concurrency=20